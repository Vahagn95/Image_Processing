import java.util.Arrays;
import ij.ImagePlus;
import ij.process.ImageProcessor;
import ij.plugin.filter.PlugInFilter;
import java.awt.Color;

import java.io.File; 
import java.io.IOException; 
import java.awt.image.BufferedImage; 
import javax.imageio.ImageIO; 

public class Histogram_Match implements PlugInFilter {

	public int setup(String args, ImagePlus im) {
		return DOES_RGB;
	}

	public double[] arrayCumulativ(int[] arr){
		double[] resultArray = new double[arr.length];
		resultArray[0] = arr[0];
		for(int i=1; i<arr.length; i++){
			resultArray[i] = arr[i] + resultArray[i-1];
		}
		for(int i=0; i<resultArray.length; i++){
			resultArray[i] = resultArray[i]/resultArray[255];
		}
		return resultArray;
	}
//"134-11.jpg"
	public int[][] getPixelsValues(){
		BufferedImage img = null;
		try {
		    img = ImageIO.read(new File("C:\\Users\\Asus\\Desktop\\134-1122.jpg"));
		} catch (IOException e) {
		    e.printStackTrace();
		}
		int x = img.getWidth();
		int y = img.getHeight();
		int r,g,b;
		Color p;
		int[][] returningArray = new int[3][256];
		for( int i = 0; i < x; i++ ){
		    for( int j = 0; j < y; j++ ){
		        p = new Color(img.getRGB( i, j ));
        		r = p.getRed(); 
        		g = p.getGreen();  
        		b = p.getBlue(); 
        		returningArray[0][r]++;
        		returningArray[1][g]++;
        		returningArray[2][b]++;
        	}
        }
        return returningArray;
	}



	public void run(ImageProcessor ip){

		int[][] arr = getPixelsValues();

		int[] redColors = arr[0];

		int[] blueColors = arr[1];

		int[] greenColors = arr[2];

		int[] badRed = new int[256];
		int[] badBlue = new int[256];
		int[] badGreen = new int[256];

		int width = ip.getWidth(), height = ip.getHeight(), pixel, r, g, b;
		Color color;
		for (int row = 0; row < height; row++){
			for (int col = 0; col < width; col++) {
				color = new Color(ip.getPixel(col, row));
				badRed[color.getRed()]++;
				badGreen[color.getGreen()]++;
				badBlue[color.getBlue()]++;
			}
		}
		double[] badRedCumulativ = arrayCumulativ(badRed);
		double[] badGreenCumulativ = arrayCumulativ(badGreen);
		double[] badBlueCumulativ = arrayCumulativ(badBlue);

		double[] goodRedCumulativ = arrayCumulativ(redColors);
		double[] goodGreenCumulativ = arrayCumulativ(greenColors);
		double[] goodBlueCumulativ = arrayCumulativ(blueColors);



		for (int row = 0; row < height; row++){
			for (int col = 0; col < width; col++) {
				color = new Color(ip.getPixel(col, row));
				r = color.getRed();
				g = color.getGreen();
				b = color.getBlue();	
				int[] colorInt = {search(goodRedCumulativ,0,goodRedCumulativ.length-1, badRedCumulativ[r]),
					search(goodGreenCumulativ,0,goodGreenCumulativ.length-1, badGreenCumulativ[g]),
					search(goodBlueCumulativ,0,goodBlueCumulativ.length-1, badBlueCumulativ[b])};
				ip.putPixel(col, row,colorInt);
			}
		}
	}

	public int search(double arr[], int first, int last, double key){  
        if (last>=first){  
            int mid = first + (last - first)/2;  
            if (arr[mid] == key){  
            return mid;  
            }  
            if (arr[mid] > key){  
            return search(arr, first, mid-1, key);  
            }else{  
            return search(arr, mid+1, last, key);  
            }  
        }  
        return last;      
 	} 
}
